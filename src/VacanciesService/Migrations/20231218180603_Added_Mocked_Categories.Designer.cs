// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VacanciesService.Database;

#nullable disable

namespace VacanciesService.Migrations
{
    [DbContext(typeof(VacanciesDbContext))]
    [Migration("20231218180603_Added_Mocked_Categories")]
    partial class Added_Mocked_Categories
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VacanciesService.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            Id = new Guid("072709d0-497a-47f7-a7e6-52244d68a8a0"),
                            Name = "Software Development"
                        },
                        new
                        {
                            Id = new Guid("3bb99b5a-43f2-4ada-a772-d7948572f583"),
                            Name = "Design"
                        },
                        new
                        {
                            Id = new Guid("f7ab8b13-46cc-439e-beda-bbb725b343d2"),
                            Name = "Management"
                        },
                        new
                        {
                            Id = new Guid("ec2f3887-cd8b-4d21-aa97-81e71ff54717"),
                            Name = "Marketing"
                        },
                        new
                        {
                            Id = new Guid("fb3215b8-2f2b-4c78-8d04-98f1000af0f0"),
                            Name = "Sales"
                        },
                        new
                        {
                            Id = new Guid("effa8ab8-aa35-4b4a-a9f6-8c2a0725ee54"),
                            Name = "Finance"
                        });
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec9cfdfc-337e-4685-b09c-8c9eb1cb6653"),
                            City = "Kyiv",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("83f07cf4-5bd9-495f-90ce-267af40d670a"),
                            City = "Lviv",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("8b7c091b-1ffe-42d9-af56-2c48766a1f10"),
                            City = "Kharkiv",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("62293990-ccee-46dd-a1ea-4c5c3c63ffd8"),
                            City = "Dnipro",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("aa3bc596-d3c9-4432-90d6-0fe2a521bdb7"),
                            City = "Odesa",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("0066c9d0-6a55-4000-89eb-e9e6e79e77d7"),
                            City = "Zaporizhzhia",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("0af1e92c-823d-4211-924a-1d3c35799634"),
                            City = "Vinnytsia",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("b4790de2-cafa-491a-a405-3e335738237c"),
                            City = "Khmelnytskyi",
                            Country = "Ukraine"
                        });
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.LocationVacancy", b =>
                {
                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("LocationId", "VacancyId");

                    b.HasIndex("VacancyId");

                    b.ToTable("LocationVacancy");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skill");

                    b.HasData(
                        new
                        {
                            Id = new Guid("99343c5e-51ae-423a-b126-4f05a8e9814e"),
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("650c1066-114a-4a5b-8d80-a6e6a46001d8"),
                            Name = "Java"
                        },
                        new
                        {
                            Id = new Guid("1afd648d-c2e7-4f38-88df-a215c724e508"),
                            Name = "Python"
                        },
                        new
                        {
                            Id = new Guid("f4c839ea-6f61-4edc-9f48-8789ca4637c4"),
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = new Guid("54ec1d50-6717-4da3-85dd-46980905946f"),
                            Name = "C++"
                        },
                        new
                        {
                            Id = new Guid("f6dbb5ea-1cb3-466d-811e-f7e7b4274372"),
                            Name = "PHP"
                        },
                        new
                        {
                            Id = new Guid("1d4c000e-365e-44b3-91e5-1b46985ae154"),
                            Name = "Ruby"
                        },
                        new
                        {
                            Id = new Guid("10e9ec4e-c654-4176-a37e-386347db2b4a"),
                            Name = "Swift"
                        },
                        new
                        {
                            Id = new Guid("4be68a1e-e0fb-47b7-a03e-b5c068d8e498"),
                            Name = "Go"
                        },
                        new
                        {
                            Id = new Guid("6d763a36-e8b3-400f-880e-2557ce96ed7f"),
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = new Guid("adfa1621-7b29-4357-b754-5acfd654fd86"),
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = new Guid("8157ecf7-2f67-40e8-bad4-891600c09a66"),
                            Name = "Scala"
                        });
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.Vacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AttendanceMode")
                        .HasColumnType("integer");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PositionTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uuid");

                    b.Property<double>("Salary")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("Vacancy");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.VacancySkill", b =>
                {
                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("SkillId", "VacancyId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancySkill");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.LocationVacancy", b =>
                {
                    b.HasOne("VacanciesService.Domain.Models.Location", "Location")
                        .WithMany("LocationVacancy")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacanciesService.Domain.Models.Vacancy", "Vacancy")
                        .WithMany("LocationVacancy")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.Vacancy", b =>
                {
                    b.HasOne("VacanciesService.Domain.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacanciesService.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.VacancySkill", b =>
                {
                    b.HasOne("VacanciesService.Domain.Models.Skill", "Skill")
                        .WithMany("VacancySkill")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacanciesService.Domain.Models.Vacancy", "Vacancy")
                        .WithMany("VacancySkill")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.Location", b =>
                {
                    b.Navigation("LocationVacancy");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.Skill", b =>
                {
                    b.Navigation("VacancySkill");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.Vacancy", b =>
                {
                    b.Navigation("LocationVacancy");

                    b.Navigation("VacancySkill");
                });
#pragma warning restore 612, 618
        }
    }
}
