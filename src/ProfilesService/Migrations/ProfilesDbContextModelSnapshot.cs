// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProfilesService.Database;

#nullable disable

namespace ProfilesService.Migrations
{
    [DbContext(typeof(ProfilesDbContext))]
    partial class ProfilesDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProfilesService.Domain.Models.CandidateProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("Attendance")
                        .HasColumnType("integer");

                    b.Property<DateOnly>("DateBirth")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double>("DesiredSalary")
                        .HasColumnType("double precision");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("GitHubUrl")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkedInUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PositionTitle")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("WorkExperience")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CandidateProfile");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Id = new Guid("882fa9e9-125a-4f1a-b437-5c96aedc9285"),
                            City = "Kyiv",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("2db784a7-29ea-4737-9248-a6ba7ce29d68"),
                            City = "Lviv",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("0825654e-5a60-4ffe-aeef-9de14835d837"),
                            City = "Kharkiv",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("e59d3acd-9c6f-4068-9bc6-a0ddecb7860c"),
                            City = "Dnipro",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("6cefe5b8-c2fc-4d42-ac7e-f834a2378b5d"),
                            City = "Odesa",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("f6ebfca2-c3b0-4fbe-b61f-c78f6dba94fe"),
                            City = "Zaporizhzhia",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("8a4db610-f094-4b06-9921-3f548bf76906"),
                            City = "Vinnytsia",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("e633e5cc-8fb2-4426-91ae-c16c8257781f"),
                            City = "Khmelnytskyi",
                            Country = "Ukraine"
                        });
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.LocationProfile", b =>
                {
                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("LocationId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("LocationProfile");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.ProfileSkills", b =>
                {
                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("SkillId", "ProfileId");

                    b.HasIndex("ProfileId");

                    b.ToTable("ProfileSkills");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.RecruiterProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateBirth")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkedInUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PositionTitle")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("RecruiterProfile");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skill");

                    b.HasData(
                        new
                        {
                            Id = new Guid("60ab2ed7-7168-451b-9d53-d87903afbb05"),
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("57770e1d-1e3f-4445-b50c-db8353a60309"),
                            Name = "Java"
                        },
                        new
                        {
                            Id = new Guid("723f094c-3c53-4291-b45a-7179d52eb46f"),
                            Name = "Python"
                        },
                        new
                        {
                            Id = new Guid("b6b2e9fd-9e5c-488d-ad3c-67ab1c60fa90"),
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = new Guid("896bcbe4-4f3e-42e7-b882-ad67f4a49f66"),
                            Name = "C++"
                        },
                        new
                        {
                            Id = new Guid("d7159815-58c9-4850-af0b-cfd047e2b327"),
                            Name = "PHP"
                        },
                        new
                        {
                            Id = new Guid("cf18f2f7-8e66-4afb-885d-6b8698bba8c1"),
                            Name = "Ruby"
                        },
                        new
                        {
                            Id = new Guid("2bcbe678-5ffc-445b-953a-1316d729d8f3"),
                            Name = "Swift"
                        },
                        new
                        {
                            Id = new Guid("9e33b3d1-4739-4449-ae79-983b7e9b475a"),
                            Name = "Go"
                        },
                        new
                        {
                            Id = new Guid("adbde482-7f84-4473-aa8b-3eff7be40977"),
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = new Guid("dd18ae8d-7699-4176-8b9f-29656ff91dd0"),
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = new Guid("b516de12-1042-4c7b-bca3-7278fe5beb12"),
                            Name = "Scala"
                        });
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.LocationProfile", b =>
                {
                    b.HasOne("ProfilesService.Domain.Models.Location", "Location")
                        .WithMany("LocationProfiles")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfilesService.Domain.Models.CandidateProfile", "Profile")
                        .WithMany("LocationProfiles")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.ProfileSkills", b =>
                {
                    b.HasOne("ProfilesService.Domain.Models.CandidateProfile", "Profile")
                        .WithMany("ProfileSkills")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfilesService.Domain.Models.Skill", "Skill")
                        .WithMany("ProfileSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.RecruiterProfile", b =>
                {
                    b.HasOne("ProfilesService.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.CandidateProfile", b =>
                {
                    b.Navigation("LocationProfiles");

                    b.Navigation("ProfileSkills");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.Location", b =>
                {
                    b.Navigation("LocationProfiles");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.Skill", b =>
                {
                    b.Navigation("ProfileSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
