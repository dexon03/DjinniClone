// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using VacanciesService.Database;

#nullable disable

namespace VacanciesService.Migrations
{
    [DbContext(typeof(VacanciesDbContext))]
    [Migration("20231211160635_Added_Index_To_Rec_Id")]
    partial class Added_Index_To_Rec_Id
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("VacanciesService.Domain.Models.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Category");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Id = new Guid("34220b83-9b28-4a76-997a-dd2e49785cf0"),
                            City = "Kyiv",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("a389d4e0-9972-4691-8cdd-8532ea50d780"),
                            City = "Lviv",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("d79e993d-6f88-4849-b3f4-6873193f44c2"),
                            City = "Kharkiv",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("9b970b6d-58bf-4c9f-b981-a3dea199fc84"),
                            City = "Dnipro",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("a8568044-4ba2-4e3c-a92b-4f147480ef12"),
                            City = "Odesa",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("94b1f01d-4f73-425f-9b9a-d8b6e80f07f7"),
                            City = "Zaporizhzhia",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("fbcdd586-418c-4753-b517-d658f9975452"),
                            City = "Vinnytsia",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("812238ec-d562-467e-a7f5-1c7443f9885e"),
                            City = "Khmelnytskyi",
                            Country = "Ukraine"
                        });
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.LocationVacancy", b =>
                {
                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("LocationId", "VacancyId");

                    b.HasIndex("VacancyId");

                    b.ToTable("LocationVacancy");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skill");

                    b.HasData(
                        new
                        {
                            Id = new Guid("49bbab77-1424-473f-94aa-40079102a2d3"),
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("b261cf52-dc0a-4257-aab0-aa740d625d16"),
                            Name = "Java"
                        },
                        new
                        {
                            Id = new Guid("55802add-009f-4d7f-a374-10366dcdae03"),
                            Name = "Python"
                        },
                        new
                        {
                            Id = new Guid("17ed2572-d21b-4828-a23b-a7e5a045fb6c"),
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = new Guid("b0e5ec0d-35d3-4f3f-99e0-6037024fa46c"),
                            Name = "C++"
                        },
                        new
                        {
                            Id = new Guid("6c0c5870-39ff-4306-82bb-7a671ddcf4ec"),
                            Name = "PHP"
                        },
                        new
                        {
                            Id = new Guid("99cd5a5c-1001-4c84-9901-6dc93c6958da"),
                            Name = "Ruby"
                        },
                        new
                        {
                            Id = new Guid("f7c461f9-5781-45d4-b6cc-054e501c4e83"),
                            Name = "Swift"
                        },
                        new
                        {
                            Id = new Guid("2a694ee3-7759-48af-a4d6-faee01f8d4f0"),
                            Name = "Go"
                        },
                        new
                        {
                            Id = new Guid("ab05729e-1c6c-4a42-b4a1-29ad16a80dfd"),
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = new Guid("d62e1084-bc24-4a05-9a20-a7cbe792efac"),
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = new Guid("16384ec8-5d01-402d-985d-868fc7bb29ec"),
                            Name = "Scala"
                        });
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.Vacancy", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<int>("AttendanceMode")
                        .HasColumnType("integer");

                    b.Property<Guid>("CategoryId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Experience")
                        .HasColumnType("integer");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("PositionTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("RecruiterId")
                        .HasColumnType("uuid");

                    b.Property<double>("Salary")
                        .HasColumnType("double precision");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("UpdatedAt")
                        .HasColumnType("timestamp without time zone");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("CompanyId");

                    b.HasIndex("RecruiterId");

                    b.ToTable("Vacancy");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.VacancySkill", b =>
                {
                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("VacancyId")
                        .HasColumnType("uuid");

                    b.HasKey("SkillId", "VacancyId");

                    b.HasIndex("VacancyId");

                    b.ToTable("VacancySkill");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.LocationVacancy", b =>
                {
                    b.HasOne("VacanciesService.Domain.Models.Location", "Location")
                        .WithMany("LocationVacancy")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacanciesService.Domain.Models.Vacancy", "Vacancy")
                        .WithMany("LocationVacancy")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.Vacancy", b =>
                {
                    b.HasOne("VacanciesService.Domain.Models.Category", "Category")
                        .WithMany()
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacanciesService.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.VacancySkill", b =>
                {
                    b.HasOne("VacanciesService.Domain.Models.Skill", "Skill")
                        .WithMany("VacancySkill")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("VacanciesService.Domain.Models.Vacancy", "Vacancy")
                        .WithMany("VacancySkill")
                        .HasForeignKey("VacancyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Skill");

                    b.Navigation("Vacancy");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.Location", b =>
                {
                    b.Navigation("LocationVacancy");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.Skill", b =>
                {
                    b.Navigation("VacancySkill");
                });

            modelBuilder.Entity("VacanciesService.Domain.Models.Vacancy", b =>
                {
                    b.Navigation("LocationVacancy");

                    b.Navigation("VacancySkill");
                });
#pragma warning restore 612, 618
        }
    }
}
