// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using ProfilesService.Database;

#nullable disable

namespace ProfilesService.Migrations
{
    [DbContext(typeof(ProfilesDbContext))]
    [Migration("20231127083317_Added_Mocked_Data")]
    partial class Added_Mocked_Data
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("ProfilesService.Domain.Models.CandidateProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateBirth")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<double>("DesiredSalary")
                        .HasColumnType("double precision");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("GitHubUrl")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkedInUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PositionTitle")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<int>("WorkExperience")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CandidateProfile");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.Company", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Company");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Location");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d8a2c680-fd38-46f5-a825-be0dedd9dd9d"),
                            City = "Kyiv",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("89df1fcf-e799-4712-8d66-b1c4b9f37d63"),
                            City = "Lviv",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("fb119ac9-537b-4221-bfe9-8e77040b9f60"),
                            City = "Kharkiv",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("99c8fe24-cfc1-4203-9d86-d68127cf9abc"),
                            City = "Dnipro",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("04a6fe97-55af-4ae8-8e31-43810baf2c1e"),
                            City = "Odesa",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("9596cf1c-b217-4b8f-aa6f-b7fb581b0a82"),
                            City = "Zaporizhzhia",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("d22b07e5-63d3-4f4a-bf51-3696f5231d2e"),
                            City = "Vinnytsia",
                            Country = "Ukraine"
                        },
                        new
                        {
                            Id = new Guid("acb32064-9b58-4532-86b1-5e7a12a87a15"),
                            City = "Khmelnytskyi",
                            Country = "Ukraine"
                        });
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.LocationProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("LocationId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("LocationId");

                    b.HasIndex("ProfileId");

                    b.ToTable("LocationProfile");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.ProfileSkills", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("ProfileId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("SkillId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("ProfileId");

                    b.HasIndex("SkillId");

                    b.ToTable("ProfileSkills");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.RecruiterProfile", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CompanyId")
                        .HasColumnType("uuid");

                    b.Property<DateOnly>("DateBirth")
                        .HasColumnType("date");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("GitHubUrl")
                        .HasColumnType("text");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("text");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("LinkedInUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<string>("PositionTitle")
                        .HasColumnType("text");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.HasKey("Id");

                    b.HasIndex("CompanyId");

                    b.ToTable("RecruiterProfile");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.Skill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Skill");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c8d64beb-aa58-45d8-aed7-d43f9f91c935"),
                            Name = "C#"
                        },
                        new
                        {
                            Id = new Guid("a589c792-8f91-4865-b1ed-30f4e8cb2dbd"),
                            Name = "Java"
                        },
                        new
                        {
                            Id = new Guid("2bb988a0-d438-4007-8700-83d18de5d4ed"),
                            Name = "Python"
                        },
                        new
                        {
                            Id = new Guid("f91a258a-1603-4cb0-8940-b44110099648"),
                            Name = "JavaScript"
                        },
                        new
                        {
                            Id = new Guid("e2e2f95b-c33e-4c41-a5dc-ae41431f0b9c"),
                            Name = "C++"
                        },
                        new
                        {
                            Id = new Guid("c0f8b1ec-8332-454b-bc29-b1fa90a2e492"),
                            Name = "PHP"
                        },
                        new
                        {
                            Id = new Guid("9a5062b9-f6f2-4fd1-80d8-60e2d1cc2d21"),
                            Name = "Ruby"
                        },
                        new
                        {
                            Id = new Guid("2315b327-92db-4184-ba38-02f1a877b7f9"),
                            Name = "Swift"
                        },
                        new
                        {
                            Id = new Guid("cbda1b0a-26b3-4d59-90ff-fffce31f1a33"),
                            Name = "Go"
                        },
                        new
                        {
                            Id = new Guid("2ddef62d-475f-4bbc-b429-75bdbf1e2fc6"),
                            Name = "Kotlin"
                        },
                        new
                        {
                            Id = new Guid("a32a886b-1608-43db-97dc-1fcf104f0f67"),
                            Name = "TypeScript"
                        },
                        new
                        {
                            Id = new Guid("b7d1aca2-fe9c-4416-9c98-8cb86e72d0ef"),
                            Name = "Scala"
                        });
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UserRole")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("User");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.LocationProfile", b =>
                {
                    b.HasOne("ProfilesService.Domain.Models.Location", "Location")
                        .WithMany("LocationProfiles")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfilesService.Domain.Models.CandidateProfile", "Profile")
                        .WithMany("LocationProfiles")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Location");

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.ProfileSkills", b =>
                {
                    b.HasOne("ProfilesService.Domain.Models.CandidateProfile", "Profile")
                        .WithMany("ProfileSkills")
                        .HasForeignKey("ProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ProfilesService.Domain.Models.Skill", "Skill")
                        .WithMany("ProfileSkills")
                        .HasForeignKey("SkillId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("Skill");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.RecruiterProfile", b =>
                {
                    b.HasOne("ProfilesService.Domain.Models.Company", "Company")
                        .WithMany()
                        .HasForeignKey("CompanyId");

                    b.Navigation("Company");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.CandidateProfile", b =>
                {
                    b.Navigation("LocationProfiles");

                    b.Navigation("ProfileSkills");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.Location", b =>
                {
                    b.Navigation("LocationProfiles");
                });

            modelBuilder.Entity("ProfilesService.Domain.Models.Skill", b =>
                {
                    b.Navigation("ProfileSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
